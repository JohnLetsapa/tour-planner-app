"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateContrastRatio;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * Contrast ratio is defined as:
 *  (L1 + 0.05) / (L2 + 0.05), where:
 *    L1 is the relative luminance of the lighter of the colors, and
 *    L2 is the relative luminance of the darker of the colors.
 *
 * Relative luminance is defined as:
 *  L = 0.2126 * R + 0.7152 * G + 0.0722 * B, where:
 *    if RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4
 *    if GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4
 *    if BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4, where:
 *      RsRGB = R8bit/255
 *      GsRGB = G8bit/255
 *      BsRGB = B8bit/255
 *
 * See: https://www.w3.org/TR/WCAG21/#dfn-contrast-ratio
 * See: https://www.w3.org/TR/WCAG21/#dfn-relative-luminance
 * See: https://webaim.org/articles/contrast/
 * See: https://webaim.org/resources/contrastchecker/
 *
 * TODO: We are not taking colors transparency (alpha channel into account) because WCAG does not
 *  provide any guidance on how to measure their contrast. How to deal with this?
 */
function calculateContrastRatio(rgbForeground, rgbBackground) {
  var L1 = calculateRelativeLuminance.apply(void 0, (0, _toConsumableArray2.default)(rgbForeground));
  var L2 = calculateRelativeLuminance.apply(void 0, (0, _toConsumableArray2.default)(rgbBackground));
  var ratio = (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);
  return Math.round(ratio * 100) / 100;
}

function calculateRelativeLuminance(R8bit, G8bit, B8bit) {
  var R = calculateRelativeLuminancePart(R8bit / 255);
  var G = calculateRelativeLuminancePart(G8bit / 255);
  var B = calculateRelativeLuminancePart(B8bit / 255);
  return 0.2126 * R + 0.7152 * G + 0.0722 * B;
}

function calculateRelativeLuminancePart(sRGB) {
  if (sRGB <= 0.03928) {
    return sRGB / 12.92;
  }

  return Math.pow((sRGB + 0.055) / 1.055, 2.4);
}