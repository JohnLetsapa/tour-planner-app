"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isHSLA;
exports.HSLA_PATTERN_TEST = void 0;

var _regexp = require("./regexp");

var HSLA_PATTERN_TEST = ['^hsla?\\(', (0, _regexp._or)([(0, _regexp._group)([_regexp._angle, // hue
_regexp._space, _regexp._percentage, // saturation
_regexp._space, _regexp._percentage, // lightness
(0, _regexp._optionalGroup)(['\\s?/\\s?', // " / "
(0, _regexp._or)([_regexp._number, _regexp._percentage]) // alpha
])]), (0, _regexp._group)([_regexp._angle, // hue
_regexp._comma, _regexp._percentage, // saturation
_regexp._comma, _regexp._percentage, // lightness
(0, _regexp._optionalGroup)([_regexp._comma, (0, _regexp._or)([_regexp._number, _regexp._percentage]) // alpha
])])]), '\\)$'].join('');
/**
 * Syntax:
 *
 * ```
 * hsl() = hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? )
 * ```
 *
 * For legacy reasons, hsl() also supports an alternate syntax that separates all of its arguments
 * with commas:
 *
 * ```
 * hsl() = hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )
 * ```
 *
 * Also for legacy reasons, an hsla() function also exists, with an identical grammar and behavior to hsl().
 *
 * See: https://www.w3.org/TR/css-color-4/#the-hsl-notation
 */

exports.HSLA_PATTERN_TEST = HSLA_PATTERN_TEST;

function isHSLA(value) {
  return new RegExp(HSLA_PATTERN_TEST, 'i').test(value);
}