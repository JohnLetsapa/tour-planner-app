import crypto from 'crypto';
var GENERATED = '@generated';
var TOKEN = '<<SignedSource::*O*zOeWoEQle#+L!plEphiEmie@IsG>>';
var PATTERN = new RegExp("".concat(GENERATED, " (?:SignedSource<<([a-f0-9]{32})>>)"));
var TokenNotFoundError = new Error("SignedSource.signFile(...): Cannot sign file without token: ".concat(TOKEN));

function hash(data, encoding) {
  var md5sum = crypto.createHash('md5');
  md5sum.update(data, encoding);
  return md5sum.digest('hex');
}
/**
 * Utility for signing and verifying the signature of a file. This is useful for
 * ensuring that the contents of a generated file are not contaminated by manual
 * changes. Example usage:
 *
 *   const myFile = `
 *     // ${SignedSource.getSigningToken()}
 *
 *     console.log('My generated file.');
 *   `;
 *   const mySignedFile = SignedSource.signFile(myFile);
 *
 * This packages originated from https://github.com/facebook/fbjs
 * (cleaned up and tweaked for our use-case).
 */


var SignedSource = {
  TokenNotFoundError: TokenNotFoundError,

  /**
   * Gets the signing token to be embedded in the file you wish to be signed.
   */
  getSigningToken: function getSigningToken() {
    return "".concat(GENERATED, " ").concat(TOKEN);
  },

  /**
   * Checks whether a file is signed *without* verifying the signature.
   */
  isSigned: function isSigned(data) {
    return !!PATTERN.exec(data);
  },

  /**
   * Signs a source file which contains a signing token. Signing modifies only
   * the signing token, so the token should be placed inside a comment in order
   * for signing to not change code semantics.
   */
  signFile: function signFile(data) {
    var dataCopy = data;

    if (!dataCopy.includes(TOKEN)) {
      if (SignedSource.isSigned(dataCopy)) {
        // Signing a file that was previously signed.
        dataCopy = dataCopy.replace(PATTERN, SignedSource.getSigningToken());
      } else {
        throw TokenNotFoundError;
      }
    }

    return dataCopy.replace(TOKEN, "SignedSource<<".concat(hash(dataCopy, 'utf8'), ">>"));
  },

  /**
   * Verifies the signature in a signed file.
   */
  verifySignature: function verifySignature(data) {
    var matches = PATTERN.exec(data);

    if (!matches) {
      throw new Error('SignedSource.verifySignature(...): Cannot verify signature of an unsigned file.');
    }

    var actual = matches[1];
    var unsigned = data.replace(PATTERN, "".concat(GENERATED, " ").concat(TOKEN));
    return hash(unsigned, 'utf8') === actual;
  }
};
export default SignedSource;