"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classPrivateFieldGet2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldGet"));

var _js = require("@adeira/js");

var _expandShorthandProperties = _interopRequireDefault(require("./expandShorthandProperties"));

var _StyleCollectorAtNode = _interopRequireDefault(require("./StyleCollectorAtNode"));

var _StyleCollectorPseudoNode = _interopRequireDefault(require("./StyleCollectorPseudoNode"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _styleBuffer = /*#__PURE__*/new WeakMap();

var _keyframes = /*#__PURE__*/new WeakMap();

var StyleCollector = /*#__PURE__*/function () {
  function StyleCollector() {
    (0, _classCallCheck2.default)(this, StyleCollector);

    _styleBuffer.set(this, {
      writable: true,
      value: new Map()
    });

    _keyframes.set(this, {
      writable: true,
      value: new Map()
    });
  }

  (0, _createClass2.default)(StyleCollector, [{
    key: "collect",
    value: function collect(baseStyleSheet) {
      var hashRegistry = new Map();

      var traverse = function traverse(styleSheetName, styleSheetObject, styleBuffer) {
        var hashSeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

        // we need to iterate it - there might be pseudo classes, at rules or leaf types
        for (var _i = 0, _Object$keys = Object.keys(styleSheetObject); _i < _Object$keys.length; _i++) {
          var maybeName = _Object$keys[_i];
          var maybeValue = styleSheetObject[maybeName];

          if (typeof maybeValue === 'number' || typeof maybeValue === 'string') {
            // basic leaf type
            var nodes = (0, _expandShorthandProperties.default)(maybeName, maybeValue, hashSeed);

            var _iterator = _createForOfIteratorHelper(nodes),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var node = _step.value;
                styleBuffer.set(node.getHash(), node); // add record to the hash registry

                var hashRegistryKey = "".concat(node.getStyleName()).concat(hashSeed);

                if (hashRegistry.has(styleSheetName)) {
                  var _hashRegistry$get;

                  (_hashRegistry$get = hashRegistry.get(styleSheetName)) === null || _hashRegistry$get === void 0 ? void 0 : _hashRegistry$get.set(hashRegistryKey, node.getHash());
                } else {
                  hashRegistry.set(styleSheetName, new Map([[hashRegistryKey, node.getHash()]]));
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          } else if (maybeName.startsWith(':')) {
            // pseudo type (:hover, ::after, ...)
            for (var _i2 = 0, _Object$keys2 = Object.keys(maybeValue); _i2 < _Object$keys2.length; _i2++) {
              var key = _Object$keys2[_i2];
              !(key.startsWith(':') === false) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'Nested pseudo classes are not allowed.') : (0, _js.invariant)(false) : void 0;
            }

            var _nodes = traverse(styleSheetName, maybeValue, new Map(), maybeName);

            if (styleBuffer.has(maybeName)) {
              var _styleBuffer$get;

              (_styleBuffer$get = styleBuffer.get(maybeName)) === null || _styleBuffer$get === void 0 ? void 0 : _styleBuffer$get.addNodes(_nodes);
            } else {
              var _node = new _StyleCollectorPseudoNode.default(maybeName, _nodes);

              styleBuffer.set(_node.getPseudo(), _node);
            }
          } else if (maybeName.startsWith('@media') || maybeName.startsWith('@supports')) {
            // at rule type (@media, @supports, ...)
            var _nodes2 = traverse(styleSheetName, maybeValue, new Map(), maybeName);

            if (styleBuffer.has(maybeName)) {
              var _styleBuffer$get2;

              (_styleBuffer$get2 = styleBuffer.get(maybeName)) === null || _styleBuffer$get2 === void 0 ? void 0 : _styleBuffer$get2.addNodes(_nodes2);
            } else {
              var _node2 = new _StyleCollectorAtNode.default(maybeName, _nodes2);

              styleBuffer.set(_node2.getAtRuleName(), _node2);
            }
          } else {
            // be silent in production (warning only)
            var messsage = "Unsupported rule \"%s\"";
            !!(process.env.NODE_ENV !== "production") ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, messsage, maybeName) : (0, _js.invariant)(false) : void 0;
            process.env.NODE_ENV !== "production" ? (0, _js.warning)(process.env.NODE_ENV !== "production", messsage, maybeName) : void 0;
          }
        }

        return styleBuffer;
      };

      for (var _i3 = 0, _Object$keys3 = Object.keys(baseStyleSheet); _i3 < _Object$keys3.length; _i3++) {
        var styleSheetName = _Object$keys3[_i3];
        var styleSheetObject = baseStyleSheet[styleSheetName];
        traverse(styleSheetName, styleSheetObject, (0, _classPrivateFieldGet2.default)(this, _styleBuffer));
      }

      return {
        styleBuffer: (0, _classPrivateFieldGet2.default)(this, _styleBuffer),
        hashRegistry: hashRegistry
      };
    }
  }, {
    key: "print",
    value: function print() {
      var sxStyle = '';
      (0, _classPrivateFieldGet2.default)(this, _styleBuffer).forEach(function (node) {
        sxStyle += node.printNodes({
          trailingSemicolon: true
        }).join('');
      });
      (0, _classPrivateFieldGet2.default)(this, _keyframes).forEach(function (node) {
        sxStyle += node;
      });
      return sxStyle;
    }
  }, {
    key: "addKeyframe",
    value: function addKeyframe(name, value) {
      if ((0, _classPrivateFieldGet2.default)(this, _keyframes).has(name)) {
        return true;
      }

      (0, _classPrivateFieldGet2.default)(this, _keyframes).set(name, value);
      return false;
    }
  }, {
    key: "reset",
    value: function reset() {
      (0, _classPrivateFieldGet2.default)(this, _styleBuffer).clear();
      (0, _classPrivateFieldGet2.default)(this, _keyframes).clear();
    }
  }]);
  return StyleCollector;
}();

var styleCollector = new StyleCollector();
var _default = styleCollector;
exports.default = _default;