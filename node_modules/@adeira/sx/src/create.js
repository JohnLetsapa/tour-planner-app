"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _js = require("@adeira/js");

var _fastLevenshtein = _interopRequireDefault(require("fast-levenshtein"));

var _injectRuntimeStyles = _interopRequireDefault(require("./injectRuntimeStyles"));

var _StyleCollector = _interopRequireDefault(require("./StyleCollector"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function suggest(sheetDefinitionName, alternativeNames) {
  return alternativeNames.sort(function (firstEl, secondEl) {
    var firstScore = _fastLevenshtein.default.get(sheetDefinitionName, firstEl);

    var secondScore = _fastLevenshtein.default.get(sheetDefinitionName, secondEl);

    return firstScore - secondScore;
  })[0];
}

function create(sheetDefinitions) {
  !((0, _js.isObjectEmpty)(sheetDefinitions) === false) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, "Function 'sx.create' cannot be called with empty stylesheet definition.") : (0, _js.invariant)(false) : void 0;

  var _styleCollector$colle = _StyleCollector.default.collect(sheetDefinitions),
      hashRegistry = _styleCollector$colle.hashRegistry,
      styleBuffer = _styleCollector$colle.styleBuffer;

  if ((0, _js.isBrowser)()) {
    (0, _injectRuntimeStyles.default)(styleBuffer);
  }

  function sxFunction(maybeObject) {
    var sheetDefinitionNames;

    for (var _len = arguments.length, styleSheetsSelectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      styleSheetsSelectors[_key - 1] = arguments[_key];
    }

    if ((0, _js.isObject)(maybeObject)) {
      !(styleSheetsSelectors.length === 0) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'SX accepts only one argument when using conditional objects. Either remove the second argument or switch to traditional syntax without conditional objects.') : (0, _js.invariant)(false) : void 0;
      sheetDefinitionNames = Object.keys(maybeObject).filter(function (key) {
        return maybeObject[key] === true;
      });
      !((0, _js.isObjectEmpty)(maybeObject) === false) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'SX must be called with at least one stylesheet selector (empty object given).') : (0, _js.invariant)(false) : void 0;
    } else {
      sheetDefinitionNames = [maybeObject].concat(styleSheetsSelectors).filter(function (el) {
        return el != null;
      });
      !(sheetDefinitionNames.length > 0) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'SX must be called with at least one stylesheet name.') : (0, _js.invariant)(false) : void 0;
    }

    var selectedStyles = {};

    var _iterator = _createForOfIteratorHelper(sheetDefinitionNames),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var sheetDefinitionName = _step.value;

        if (sheetDefinitionName != null && sheetDefinitionName !== false) {
          (function () {
            // stylesheet definition name can be nullable when selecting conditionally
            var hashedValues = hashRegistry.get(sheetDefinitionName);
            !(hashedValues != null) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, "SX was called with '%s' stylesheet name but it doesn't exist. Did you mean '%s' instead?", sheetDefinitionName, suggest(sheetDefinitionName, (0, _toConsumableArray2.default)(hashRegistry.keys()))) : (0, _js.invariant)(false) : void 0;
            (0, _toConsumableArray2.default)(hashedValues.keys()).forEach(function (styleKey) {
              selectedStyles[styleKey] = hashedValues.get(styleKey);
            });
          })();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var classes = Object.values(selectedStyles);

    if (classes.length === 0 && (0, _js.isObject)(maybeObject)) {
      // This happens when user is using conditional selectors. It would be incorrect to return an
      // empty string because React would render `class=""`. Instead, we want to skip the class
      // attribute completely. Example of such situation:
      //
      // ```
      // <div className={styles({ conditionalStyle: false })} />
      // ```
      return undefined;
    }

    var uniqueClasses = (0, _toConsumableArray2.default)(new Set(classes));
    return uniqueClasses.join(' ');
  } // expose the hash registry for external styles merging


  for (var _i = 0, _Object$keys = Object.keys(sheetDefinitions); _i < _Object$keys.length; _i++) {
    var sheetDefinitionKey = _Object$keys[_i];
    sxFunction[sheetDefinitionKey] = sheetDefinitions[sheetDefinitionKey];
  } // $FlowFixMe[incompatible-return] not sure how to explain that conditional object can return `void`


  return sxFunction;
}