"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof3 = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generatePropertyTypes;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _signedSource = _interopRequireDefault(require("@adeira/signed-source"));

var changeCase = _interopRequireWildcard(require("change-case"));

var _mdnData = _interopRequireDefault(require("mdn-data"));

var _collectTypes = _interopRequireDefault(require("./generator/collectTypes"));

var _prettify = _interopRequireDefault(require("./prettify"));

var _flowTypes = require("./generator/flowTypes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function generatePropertyTypes(cb) {
  var allProperties = new Map();

  for (var _i = 0, _Object$keys = Object.keys(_mdnData.default.css.properties); _i < _Object$keys.length; _i++) {
    var rawPropertyName = _Object$keys[_i];
    var rawProperty = _mdnData.default.css.properties[rawPropertyName];

    if (['standard', 'experimental'].includes(rawProperty.status)) {
      // we do not generate "obsolete" and "nonstandard" properties
      allProperties.set(rawPropertyName, rawProperty);
    }
  }

  var flowPrint = '';
  allProperties.forEach(function (propertyData, property) {
    // default Flow type
    var flowTypes = new Set([_flowTypes.FLOW_TYPE_NUMBER, _flowTypes.FLOW_TYPE_STRING]);
    var propertySyntax = propertyData === null || propertyData === void 0 ? void 0 : propertyData.syntax;

    if (propertySyntax) {
      var accurateFlowTypes = (0, _collectTypes.default)(propertySyntax);

      if (accurateFlowTypes != null) {
        flowTypes = accurateFlowTypes; // All CSS properties accept the keywords inherit, initial and unset, that are defined throughout CSS.
        // See: https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax

        flowTypes.add('inherit');
        flowTypes.add('initial');
        flowTypes.add('unset');
      }
    }

    var propertyName = changeCase.camelCase(property);

    if (propertyName !== '') {
      if (flowTypes.has(_flowTypes.FLOW_TYPE_STRING)) {
        // If the type collection yields `string` type, then there is no point in including string
        // enums in the input (because `string` type would swallow it anyway).
        flowTypes.forEach(function (type) {
          return typeof type === 'string' && flowTypes.delete(type);
        });
      }

      var flowType = Array.from(flowTypes).map(function (type) {
        return (0, _typeof2.default)(type) === 'symbol' ? Symbol.keyFor(type) : "\"".concat(type, "\"");
      }).join('|');
      var mdnUrlComment = (propertyData === null || propertyData === void 0 ? void 0 : propertyData.mdn_url) != null ? "// ".concat(propertyData.mdn_url) : '';
      flowPrint += "+'".concat(propertyName, "'?:").concat(mdnUrlComment, "\n").concat(flowType, ",");
    }
  });

  var template = _signedSource.default.signFile("\n/**\n * ".concat(_signedSource.default.getSigningToken(), "\n * @flow strict\n *\n * @see https://www.w3.org/Style/CSS/all-properties.en.html\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Values_and_Units\n */\n\nexport type AllCSSPropertyTypes = {\n  ").concat(flowPrint, "\n};\n"));

  return (0, _prettify.default)(template, cb);
}