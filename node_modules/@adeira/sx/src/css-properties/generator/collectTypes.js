"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = collectTypes;

var _mdnData = _interopRequireDefault(require("mdn-data"));

var _cssTree = require("css-tree");

var _js = require("@adeira/js");

var _flowTypes = require("./flowTypes");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var panicCounter = 1; // https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax#Summary

function collectTypes(syntax) {
  var flowTypes = new Set();

  try {
    var ast = _cssTree.definitionSyntax.parse(syntax);

    _cssTree.definitionSyntax.walk(ast, function enter(node) {
      if (node.type === 'Keyword') {
        flowTypes.add(node.name);
      } else if (node.type === 'Type') {
        if (['length'].includes(node.name)) {
          // Length can be Flow type of a number (unitless number converted to PX) or with some
          // explicit unit (therefore string), see: https://developer.mozilla.org/en-US/docs/Web/CSS/length
          flowTypes.add(_flowTypes.FLOW_TYPE_NUMBER);
          flowTypes.add(_flowTypes.FLOW_TYPE_STRING);
        } else if (['integer', 'number'].includes(node.name)) {
          // number primitive
          flowTypes.add(_flowTypes.FLOW_TYPE_NUMBER);
        } else if (['angle', 'angle-percentage', 'color', 'image', 'percentage', 'ratio', 'string', 'time'].includes(node.name)) {
          // string primitive
          flowTypes.add(_flowTypes.FLOW_TYPE_STRING);
        } else if (['alpha-value', 'blend-mode', 'compat-auto', 'length-percentage', 'line-style', 'line-width'].includes(node.name)) {
          var _collectTypes;

          // expand additional nested (simple) syntaxes
          var expandedTypes = (_collectTypes = collectTypes(_mdnData.default.css.syntaxes[node.name].syntax)) !== null && _collectTypes !== void 0 ? _collectTypes : [];

          var _iterator = _createForOfIteratorHelper(expandedTypes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var expandedType = _step.value;
              flowTypes.add(expandedType);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          throw node;
        }
      } else if (node.type === 'Group') {
        if (node.combinator === '|' || node.combinator === ' ') {
          var _iterator2 = _createForOfIteratorHelper(node.terms),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var term = _step2.value;
              enter(term);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          throw node;
        }
      } else if (node.type === 'Multiplier') {
        if (node.comma === true) {
          // multiplier "#" implies the resulting Flow type must be a string because the values can repeat
          flowTypes.add(_flowTypes.FLOW_TYPE_STRING);
        } else {
          throw node;
        }
      } else {
        throw node;
      }
    });

    return flowTypes;
  } catch (node) {
    process.env.NODE_ENV !== "production" ? (0, _js.warning)(false, '❌ PANIC %s (unsupported %s): %s', panicCounter++, node.type, syntax) : void 0;
    return null;
  }
}