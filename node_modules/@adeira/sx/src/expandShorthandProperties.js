"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expandShorthandProperties;

var _expandBackground = _interopRequireDefault(require("./shorthand-properties/expandBackground"));

var _expandBorder = _interopRequireDefault(require("./shorthand-properties/expandBorder"));

var _expandFlex = _interopRequireDefault(require("./shorthand-properties/expandFlex"));

var _expandMarginPadding = _interopRequireDefault(require("./shorthand-properties/expandMarginPadding"));

var _expandOverflow = _interopRequireDefault(require("./shorthand-properties/expandOverflow"));

var _StyleCollectorNode = _interopRequireDefault(require("./StyleCollectorNode"));

/**
 * Purpose of this function is to expand shorthand CSS properties which could cause conflicts
 * when defined together. Imagine the following example:
 *
 * ```
 * const styles = sx.create({
 *   primary: { marginTop: '10px' },
 *   button: { margin: 0 },
 * });
 * ```
 *
 * It could generate the following CSS:
 *
 * ```
 * .c0 { margin-top: 10px }
 * .c1 { margin: 0px }
 * ```
 *
 * That would be a tricky situation because CSS specificity depends on the CSS definition order
 * and therefore the top margin would be always overwritten when used together. Instead, we
 * expand the shorthand properties into something like this:
 *
 * ```
 * .c0 { margin-top: 10px }   << primary
 * .c1 { margin-top: 0px }    << button
 * .c2 { margin-right: 0px }
 * .c3 { margin-bottom: 0px }
 * .c4 { margin-left: 0px }
 * ```
 *
 * This way SX is not dependent on the CSS rules insertion order but rather on the markup.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#Tricky_edge_cases
 */
function expandShorthandProperties(propertyName, propertyValue) {
  var hashSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  // TODO (https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#See_also):
  //  - https://developer.mozilla.org/en-US/docs/Web/CSS/animation
  //  - https://developer.mozilla.org/en-US/docs/Web/CSS/font
  //  - https://developer.mozilla.org/en-US/docs/Web/CSS/transition
  //  - ...
  if (propertyName === 'background') {
    return (0, _expandBackground.default)(propertyName, propertyValue, hashSeed);
  } else if (propertyName === 'border' || propertyName === 'borderBlock' || propertyName === 'borderInline') {
    return (0, _expandBorder.default)(propertyName, propertyValue, hashSeed);
  } else if (propertyName === 'margin' || propertyName === 'padding') {
    return (0, _expandMarginPadding.default)(propertyName, propertyValue, hashSeed);
  } else if (propertyName === 'overflow') {
    return (0, _expandOverflow.default)(propertyName, propertyValue, hashSeed);
  } else if (propertyName === 'flex') {
    return (0, _expandFlex.default)(propertyName, propertyValue, hashSeed);
  } // could not be expanded


  return [new _StyleCollectorNode.default(propertyName, propertyValue, hashSeed)];
}