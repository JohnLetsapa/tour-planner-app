"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.injectRuntimeKeyframes = injectRuntimeKeyframes;
exports.default = injectRuntimeStyles;

var _js = require("@adeira/js");

var _stylis = require("stylis");

var _StyleCollectorAtNode = _interopRequireDefault(require("./StyleCollectorAtNode"));

var _StyleCollectorNode = _interopRequireDefault(require("./StyleCollectorNode"));

var _StyleCollectorPseudoNode = _interopRequireDefault(require("./StyleCollectorPseudoNode"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var styleAdeiraSXTag = null;

var getStyleTag = function getStyleTag() {
  if (styleAdeiraSXTag === null) {
    styleAdeiraSXTag = document.querySelector('style[data-adeira-sx]');

    if (styleAdeiraSXTag === null) {
      // Still `null` so let's create the style element:
      var htmlHead = document.head;
      styleAdeiraSXTag = document.createElement('style');
      styleAdeiraSXTag.type = 'text/css';
      styleAdeiraSXTag.setAttribute('data-adeira-sx', '');
      /* $FlowFixMe[incompatible-call] This comment suppresses an error when
       * upgrading Flow. To see the error delete this comment and run Flow. */

      htmlHead === null || htmlHead === void 0 ? void 0 : htmlHead.appendChild(styleAdeiraSXTag);
    }
  }
  /* $FlowFixMe[incompatible-use] This comment suppresses an error when
   * upgrading Flow. To see the error delete this comment and run Flow. */


  var styleSheet = styleAdeiraSXTag.sheet;
  !(styleSheet != null) ? process.env.NODE_ENV !== "production" ? (0, _js.invariant)(false, 'SX cannot apply runtime styles because HTMLStyleElement.sheet does not exist.') : (0, _js.invariant)(false) : void 0;
  return styleSheet;
};

function hasStyleRule(match) {
  var styleSheet = getStyleTag();

  var _iterator = _createForOfIteratorHelper(styleSheet.cssRules),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var cssRule = _step.value;

      if (match(cssRule)) {
        return true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return false;
}

function injectRuntimeKeyframes(css, name) {
  var styleSheet = getStyleTag();

  var matchFunction = function matchFunction(cssRule) {
    if (cssRule.type === CSSRule.KEYFRAMES_RULE) {
      var rule = cssRule;
      return rule.name === name;
    }

    return false;
  };

  if (hasStyleRule(matchFunction) === false) {
    var rules = [];
    (0, _stylis.serialize)((0, _stylis.compile)(css), (0, _stylis.middleware)([_stylis.prefixer, function (rule) {
      return rules.push(rule);
    }]));
    rules.forEach(function (rule) {
      styleSheet.insertRule((0, _stylis.serialize)([rule], _stylis.stringify), styleSheet.cssRules.length);
    });
  }
} // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model


function injectRuntimeStyles(styleBuffer) {
  var styleSheet = getStyleTag();

  var matchFunction = function matchFunction(node) {
    return function (cssRule) {
      if (cssRule.type === CSSRule.STYLE_RULE) {
        var styleRule = cssRule;

        if (styleRule.selectorText === ".".concat(node.getHash())) {
          return true;
        }
      }

      return false;
    };
  };

  styleBuffer.forEach(function (node) {
    var insertIndex = styleSheet.cssRules.length;

    if (node instanceof _StyleCollectorNode.default) {
      if (hasStyleRule(matchFunction(node)) === false) {
        // apply missing styles
        var rule = (0, _stylis.serialize)((0, _stylis.compile)(node.printNodes({
          trailingSemicolon: true
        }).join('')), (0, _stylis.middleware)([_stylis.prefixer, _stylis.stringify]));
        styleSheet.insertRule(rule, insertIndex);
      }
    } else if (node instanceof _StyleCollectorAtNode.default) {
      // TODO: make sure we are not adding already added styles (?)
      var _rule = (0, _stylis.serialize)((0, _stylis.compile)(node.printNodes({
        trailingSemicolon: true
      }).join('')), (0, _stylis.middleware)([_stylis.prefixer, _stylis.stringify]));

      styleSheet.insertRule(_rule, insertIndex);
    } else if (node instanceof _StyleCollectorPseudoNode.default) {
      var nodes = node.printNodes({
        trailingSemicolon: true
      });

      var _iterator2 = _createForOfIteratorHelper(nodes),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var nodeElement = _step2.value;

          // TODO: make sure we are not adding already added styles (?)
          var _rule2 = (0, _stylis.serialize)((0, _stylis.compile)(nodeElement), (0, _stylis.middleware)([_stylis.prefixer, _stylis.stringify]));

          styleSheet.insertRule(_rule2, insertIndex);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {
      process.env.NODE_ENV !== "production" ? (0, _js.warning)(false, 'Node not supported in runtime styles: %j', node) : void 0;
    }
  });
}