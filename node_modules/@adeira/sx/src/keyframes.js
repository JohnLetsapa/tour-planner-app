"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyframes;

var _js = require("@adeira/js");

var _jsonStableStringify = _interopRequireDefault(require("json-stable-stringify"));

var _hashStyle = _interopRequireDefault(require("./hashStyle"));

var _StyleCollector = _interopRequireDefault(require("./StyleCollector"));

var _transformStyleName = _interopRequireDefault(require("./transformStyleName"));

var _transformValue = _interopRequireDefault(require("./transformValue"));

var _injectRuntimeStyles = require("./injectRuntimeStyles");

var extractStyles = function extractStyles(styles) {
  var cssDefinition = '';

  for (var _i = 0, _Object$keys = Object.keys(styles); _i < _Object$keys.length; _i++) {
    var styleName = _Object$keys[_i];
    var styleValue = styles[styleName];
    cssDefinition += "".concat((0, _transformStyleName.default)(styleName), ":").concat((0, _transformValue.default)(styleName, styleValue), ";");
  }

  return cssDefinition;
};

var transformKey = function transformKey(key) {
  return key.replace(/\s/g, '');
};

function keyframes(styleDefinitions) {
  var cssDefinition = ''; // `from{maxHeight:0,opacity:0}` should be the same as `from{opacity:0,maxHeight:0}`

  var parsedDefinitions = JSON.parse((0, _jsonStableStringify.default)(styleDefinitions));

  for (var _i2 = 0, _Object$keys2 = Object.keys(parsedDefinitions); _i2 < _Object$keys2.length; _i2++) {
    var key = _Object$keys2[_i2];
    var styleValue = (0, _js.nullthrows)(parsedDefinitions[key]);
    cssDefinition += "".concat(transformKey(key), " {").concat(extractStyles(styleValue), "}");
  }

  var name = (0, _hashStyle.default)(cssDefinition);
  var frame = "@keyframes ".concat(name, " {").concat(cssDefinition, "}");

  var exists = _StyleCollector.default.addKeyframe(name, frame);

  if ((0, _js.isBrowser)() && !exists) {
    // It is possible that the keyframe was added on the server
    // The StyleCollector will return false, but the injectRuntimeKeyframes checks
    // If the rule is already added, so it won't be duplicated
    (0, _injectRuntimeStyles.injectRuntimeKeyframes)(frame, name);
  }

  return name;
}