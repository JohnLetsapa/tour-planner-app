"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expandBackground;

var _cssColors = require("@adeira/css-colors");

var _StyleCollectorNode = _interopRequireDefault(require("../StyleCollectorNode"));

/**
 * 
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#Background_Properties
 */
function expandBackground(propertyName, propertyValue) {
  var hashSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  // Note: we currently ignore more complex syntaxes at this moment
  // see: https://developer.mozilla.org/en-US/docs/Web/CSS/background#Formal_syntax
  var background = new Map([['backgroundImage', new _StyleCollectorNode.default('backgroundImage', 'none', hashSeed)], ['backgroundPosition', new _StyleCollectorNode.default('backgroundPosition', '0% 0%', hashSeed)], ['backgroundSize', new _StyleCollectorNode.default('backgroundSize', 'auto auto', hashSeed)], ['backgroundRepeat', new _StyleCollectorNode.default('backgroundRepeat', 'repeat', hashSeed)], ['backgroundOrigin', new _StyleCollectorNode.default('backgroundOrigin', 'padding-box', hashSeed)], ['backgroundClip', new _StyleCollectorNode.default('backgroundClip', 'border-box', hashSeed)], ['backgroundAttachment', new _StyleCollectorNode.default('backgroundAttachment', 'scroll', hashSeed)], ['backgroundColor', new _StyleCollectorNode.default('backgroundColor', 'transparent', hashSeed)]]);

  if ((0, _cssColors.isColor)(propertyValue)) {
    background.set('backgroundColor', new _StyleCollectorNode.default('backgroundColor', propertyValue, hashSeed));
    return Array.from(background.values());
  } else if (propertyValue === 'none') {
    background.set('backgroundImage', new _StyleCollectorNode.default('backgroundImage', propertyValue, hashSeed));
    return Array.from(background.values());
  } // could not be expanded


  return [new _StyleCollectorNode.default(propertyName, propertyValue, hashSeed)];
}