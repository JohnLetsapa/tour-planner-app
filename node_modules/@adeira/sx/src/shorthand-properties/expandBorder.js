"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expandBorder;

var _cssColors = require("@adeira/css-colors");

var _StyleCollectorNode = _interopRequireDefault(require("../StyleCollectorNode"));

/**
 * 
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#Border_Properties
 */
function expandBorder(propertyName, propertyValue) {
  var hashSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  // Note: we currently ignore more complex syntaxes at this moment
  // https://developer.mozilla.org/en-US/docs/Web/CSS/border#Formal_syntax
  var borderPhysical = new Map([// all these properties are actually shorthands as well so we should consider expanding them further
  ['borderWidth', new _StyleCollectorNode.default('borderWidth', 'medium', hashSeed)], ['borderStyle', new _StyleCollectorNode.default('borderStyle', 'none', hashSeed)], ['borderColor', new _StyleCollectorNode.default('borderColor', 'currentcolor', hashSeed)]]);
  var borderLogicalBlock = new Map([// all these properties are actually shorthands as well so we should consider expanding them further
  ['borderBlockWidth', new _StyleCollectorNode.default('borderBlockWidth', 'medium', hashSeed)], ['borderBlockStyle', new _StyleCollectorNode.default('borderBlockStyle', 'none', hashSeed)], ['borderBlockColor', new _StyleCollectorNode.default('borderBlockColor', 'currentcolor', hashSeed)]]);
  var borderLogicalInline = new Map([// all these properties are actually shorthands as well so we should consider expanding them further
  ['borderInlineWidth', new _StyleCollectorNode.default('borderInlineWidth', 'medium', hashSeed)], ['borderInlineStyle', new _StyleCollectorNode.default('borderInlineStyle', 'none', hashSeed)], ['borderInlineColor', new _StyleCollectorNode.default('borderInlineColor', 'currentcolor', hashSeed)]]);

  if ((0, _cssColors.isColor)(propertyValue)) {
    if (propertyName === 'borderBlock') {
      borderLogicalBlock.set('borderBlockColor', new _StyleCollectorNode.default('borderBlockColor', propertyValue, hashSeed));
      return Array.from(borderLogicalBlock.values());
    } else if (propertyName === 'borderInline') {
      borderLogicalInline.set('borderInlineColor', new _StyleCollectorNode.default('borderInlineColor', propertyValue, hashSeed));
      return Array.from(borderLogicalInline.values());
    }

    borderPhysical.set('borderColor', new _StyleCollectorNode.default('borderColor', propertyValue, hashSeed));
    return Array.from(borderPhysical.values());
  } // could not be expanded


  return [new _StyleCollectorNode.default(propertyName, propertyValue, hashSeed)];
}