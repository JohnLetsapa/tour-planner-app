"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = expandMarginPadding;

var _StyleCollectorNode = _interopRequireDefault(require("../StyleCollectorNode"));

/**
 * 
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties#Margin_and_Padding_Properties
 */
function expandMarginPadding(propertyName, propertyValue) {
  var hashSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var top = "".concat(propertyName, "Top");
  var right = "".concat(propertyName, "Right");
  var bottom = "".concat(propertyName, "Bottom");
  var left = "".concat(propertyName, "Left");

  if (typeof propertyValue === 'string') {
    var chunks = propertyValue.split(/\s+/);

    if (chunks.length === 1) {
      var chunk = chunks[0];
      return [new _StyleCollectorNode.default(top, chunk, hashSeed), new _StyleCollectorNode.default(right, chunk, hashSeed), new _StyleCollectorNode.default(bottom, chunk, hashSeed), new _StyleCollectorNode.default(left, chunk, hashSeed)];
    } else if (chunks.length === 2) {
      return [new _StyleCollectorNode.default(top, chunks[0], hashSeed), new _StyleCollectorNode.default(right, chunks[1], hashSeed), new _StyleCollectorNode.default(bottom, chunks[0], hashSeed), new _StyleCollectorNode.default(left, chunks[1], hashSeed)];
    } else if (chunks.length === 3) {
      return [new _StyleCollectorNode.default(top, chunks[0], hashSeed), new _StyleCollectorNode.default(right, chunks[1], hashSeed), new _StyleCollectorNode.default(bottom, chunks[2], hashSeed), new _StyleCollectorNode.default(left, chunks[1], hashSeed)];
    } else if (chunks.length === 4) {
      return [new _StyleCollectorNode.default(top, chunks[0], hashSeed), new _StyleCollectorNode.default(right, chunks[1], hashSeed), new _StyleCollectorNode.default(bottom, chunks[2], hashSeed), new _StyleCollectorNode.default(left, chunks[3], hashSeed)];
    }
  } else if (typeof propertyValue === 'number') {
    return [new _StyleCollectorNode.default(top, propertyValue, hashSeed), new _StyleCollectorNode.default(right, propertyValue, hashSeed), new _StyleCollectorNode.default(bottom, propertyValue, hashSeed), new _StyleCollectorNode.default(left, propertyValue, hashSeed)];
  }

  return [new _StyleCollectorNode.default(propertyName, propertyValue, hashSeed)];
}