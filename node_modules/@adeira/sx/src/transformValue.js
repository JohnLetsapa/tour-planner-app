"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformValue;

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _setPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/setPrototypeOf"));

var _cssColors = require("@adeira/css-colors");

var _isUnitlessNumber = _interopRequireDefault(require("./css-properties/isUnitlessNumber"));

function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); _groups.set(_this, groups || _groups.get(re)); return (0, _setPrototypeOf2.default)(_this, BabelRegExp.prototype); } (0, _inherits2.default)(BabelRegExp, RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; if (_typeof(args[args.length - 1]) !== "object") { args = [].slice.call(args); args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function stripLeadingZero(value) {
  return value.replace( /*#__PURE__*/_wrapRegExp(/^0(\..+)/, {
    val: 1
  }), '$1');
}

function transformValue(styleName) {
  var styleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (typeof styleValue === 'string' && styleValue.startsWith('var(')) {
    // color normalization of CSS variables defaults (https://developer.mozilla.org/en-US/docs/Web/CSS/var())
    var separator = ',';
    var index = styleValue.indexOf(separator);

    if (index === -1) {
      // no default value => early return
      return styleValue;
    }

    var splits = [styleValue.slice(4, // "var("
    index), styleValue.slice(index + separator.length, -1 // ")"
    ).trim()];

    if ((0, _cssColors.isColor)(splits[1])) {
      return "var(".concat(splits[0], ",").concat((0, _cssColors.normalizeColor)(splits[1]), ")");
    }

    return "var(".concat(splits[0], ",").concat(splits[1], ")");
  } else if (typeof styleValue === 'string' && (0, _cssColors.isColor)(styleValue)) {
    // color normalization (to reduce duplicates in the atomic result)
    return (0, _cssColors.normalizeColor)(styleValue);
  } else if (typeof styleValue === 'number') {
    // 42 -> 42px (unless it's unit-less property like zIndex)
    return stripLeadingZero(_isUnitlessNumber.default[styleName] ? "".concat(styleValue) : "".concat(styleValue, "px"));
  }

  return stripLeadingZero("".concat(styleValue));
}