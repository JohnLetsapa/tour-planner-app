"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getSXImportSpecifiers = require('./utils/getSXImportSpecifiers');

var isSXVariableDeclarator = require('./utils/isSXVariableDeclarator');
/**
 * This rule tries to find incorrect SX concatenations. For example:
 *
 * ```
 * <div className={`${styles('aaa')} ${styles('bbb')}`} />
 * ```
 *
 * Should be:
 *
 * ```
 * <div className={styles('aaa', 'bbb')} />
 * ```
 *
 * It's because the first call doesn't handle rules specificity correctly whereas the later one does.
 * Don't get confused: SX doesn't handle the specificity in a same way like CSS.
 */


module.exports = {
  create: function create(context) {
    // import sx from '@adeira/sx'
    //        ^^
    var importDefaultSpecifier = null; // import { create as sxCreate } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierCreate = null; // "styles" in "let styles = sx.create({})

    var sxFunctionName = null;
    var relevantTemplateLiterals = [];
    return {
      // TODO: add support for `require("@adeira/sx")`
      'ImportDeclaration': function ImportDeclaration(node) {
        var importSpecifiers = getSXImportSpecifiers(node);

        if (importSpecifiers !== null) {
          importDefaultSpecifier = importSpecifiers.importDefaultSpecifier;
          importSpecifierCreate = importSpecifiers.importSpecifierCreate;
        }
      },
      'VariableDeclarator': function VariableDeclarator(node) {
        if (isSXVariableDeclarator(node, importDefaultSpecifier, importSpecifierCreate)) {
          sxFunctionName = node.id.name;
        }
      },
      'JSXExpressionContainer': function JSXExpressionContainer(node) {
        if (importDefaultSpecifier == null && importSpecifierCreate == null) {
          // not in an @adeira/sx scope, early exit
          return;
        }

        if (node.expression.type === 'TemplateLiteral') {
          relevantTemplateLiterals.push(node);
        }
      },
      'Program:exit': function ProgramExit() {
        var _iterator = _createForOfIteratorHelper(relevantTemplateLiterals),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var relevantTemplateLiteralNode = _step.value;
            var sxTemplateCallExpressions = 0;

            if (relevantTemplateLiteralNode.expression.type === 'TemplateLiteral') {
              var _iterator2 = _createForOfIteratorHelper(relevantTemplateLiteralNode.expression.expressions),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var expression = _step2.value;

                  if (expression.type === 'CallExpression') {
                    if (expression.callee.name === sxFunctionName) {
                      sxTemplateCallExpressions += 1;
                    }
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }

            if (sxTemplateCallExpressions >= 2) {
              // This rule will be satisfied if we find at least 2 SX expressions in the string.
              context.report({
                node: relevantTemplateLiteralNode,
                message: 'SX functions should not be concatenated in a template literal otherwise styles ' + 'precedence might not work as expected.'
              });
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    };
  }
};