"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getObjectPropertyName = require('./utils/getObjectPropertyName');

var getSXImportSpecifiers = require('./utils/getSXImportSpecifiers');

var isSXVariableDeclarator = require('./utils/isSXVariableDeclarator');
/**
 * This rule makes sure that all defined stylesheets are used AND all used stylesheets are defined.
 */


module.exports = {
  create: function create(context) {
    // import sx from '@adeira/sx'
    //        ^^
    var importDefaultSpecifier = null; // import { create as sxCreate } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierCreate = null; // stylesheet names which were defined via `sx.create`
    // const xxx = sx.create({yyy, zzz})   =>   Map([["xxx", ["yyy", "zzz"]]])

    var definedStylesheetNames = new Map();
    var definedStylesheetNodes = new Map();
    var definedStylesheetNameNodes = new Map(); // xxx('aaa', 'bbb')   =>   Map([["xxx", [aaaNode, bbbNode]]])

    var usedStylesheetNames = new Map();
    var usedStylesheetNodes = new Map();
    var unableToAnalyzeUsedStylesheets = false;
    return {
      // TODO: add support for `require("@adeira/sx")`
      'ImportDeclaration': function ImportDeclaration(node) {
        var importSpecifiers = getSXImportSpecifiers(node);

        if (importSpecifiers !== null) {
          importDefaultSpecifier = importSpecifiers.importDefaultSpecifier;
          importSpecifierCreate = importSpecifiers.importSpecifierCreate;
        }
      },
      // const styles = sx.create({})
      //       ^^^^^^^^^^^^^^^^^^^^^^
      //       { id }   {    init    }
      'VariableDeclarator': function VariableDeclarator(node) {
        if (isSXVariableDeclarator(node, importDefaultSpecifier, importSpecifierCreate)) {
          var _node$init;

          var initArguments = ((_node$init = node.init) === null || _node$init === void 0 ? void 0 : _node$init.arguments) || [];
          var firstArgument = initArguments[0]; // $FlowIssue[unnecessary-optional-chain]: https://github.com/facebook/flow/issues/5972

          if ((firstArgument === null || firstArgument === void 0 ? void 0 : firstArgument.type) === 'ObjectExpression') {
            var _firstArgument$proper;

            var firstArgumentProperties = (_firstArgument$proper = firstArgument.properties) !== null && _firstArgument$proper !== void 0 ? _firstArgument$proper : [];

            var _iterator = _createForOfIteratorHelper(firstArgumentProperties),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var property = _step.value;

                if (property.type === 'Property') {
                  var _definedStylesheetNam;

                  var alreadyCaptured = (_definedStylesheetNam = definedStylesheetNames.get(node.id.name)) !== null && _definedStylesheetNam !== void 0 ? _definedStylesheetNam : [];
                  var propertyName = void 0;

                  if (property.key.type === 'Literal') {
                    propertyName = property.key.value;
                  } else if (property.key.type === 'Identifier') {
                    propertyName = property.key.name;
                  }

                  definedStylesheetNames.set(node.id.name, [].concat((0, _toConsumableArray2.default)(alreadyCaptured), [propertyName]));
                  definedStylesheetNameNodes.set(propertyName, property);
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            definedStylesheetNodes.set(node.id.name, node);
          }
        }
      },
      // styles('aaa')
      // ^^^^^^^^^^^^^
      'CallExpression': function CallExpression(node) {
        var _node$arguments;

        var expressionArguments = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];

        var _iterator2 = _createForOfIteratorHelper(expressionArguments),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var argument = _step2.value;

            if (['CallExpression'].includes(argument.type)) {
              // these are argument which we simply want to acknowledge and skip (but continue analyzing)
              return;
            } else if (argument.type === 'ObjectExpression') {
              // special case for conditional objects
              var _iterator4 = _createForOfIteratorHelper(argument.properties),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var property = _step4.value;

                  if (property.type === 'Property' && property.value.type === 'ObjectExpression') {
                    // we assume this is a SX.create definition so we skip it
                    return;
                  }
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            } else if (![// Supported argument types:
            'ConditionalExpression', 'Literal', 'LogicalExpression', 'TemplateLiteral'].includes(argument.type)) {
              // backout early if we cannot recognize (or do not support) the 'CallExpression' pattern
              unableToAnalyzeUsedStylesheets = true;
              return;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var usedNames = new Set();

        var _iterator3 = _createForOfIteratorHelper(expressionArguments),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _argument = _step3.value;
            // TODO: more cases (deeper analysis)
            var value = void 0;

            if (_argument.type === 'ObjectExpression') {
              var _iterator5 = _createForOfIteratorHelper(_argument.properties),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var _property = _step5.value;

                  if (_property.type === 'Property') {
                    var propertyName = getObjectPropertyName(_property);
                    usedNames.add(propertyName);
                    usedStylesheetNodes.set(propertyName, _argument);
                  }
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }

              continue;
            } else if (_argument.type === 'Literal') {
              // styles('aaa')
              value = _argument.value;
            } else if (_argument.type === 'TemplateLiteral') {
              // styles(`aaa`)
              value = _argument.quasis[0].value.raw;
            } else if (_argument.type === 'LogicalExpression') {
              if (_argument.right.type === 'Literal') {
                // styles(isAAA && 'aaa')
                value = _argument.right.value;
              }
            } else if (_argument.type === 'ConditionalExpression') {
              if (_argument.consequent.type === 'Literal' && typeof _argument.consequent.value === 'string' // can be also `null`, `false`, …
              ) {
                // styles(isAAA ? 'aaa' : null)
                var consequentValue = _argument.consequent.value;
                usedNames.add(consequentValue);
                usedStylesheetNodes.set(consequentValue, _argument);
              }

              if (_argument.alternate.type === 'Literal' && typeof _argument.alternate.value === 'string' // can be also `null`, `false`, …
              ) {
                // styles(isBBB ? null : 'aaa')
                var alternateValue = _argument.alternate.value;
                usedNames.add(alternateValue);
                usedStylesheetNodes.set(alternateValue, _argument);
              }

              continue;
            }

            usedNames.add(value);
            usedStylesheetNodes.set(value, _argument);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        var maybeCaptured = usedStylesheetNames.get(node.callee.name);
        var alreadyCaptured = maybeCaptured !== null && maybeCaptured !== void 0 ? maybeCaptured : [];
        usedStylesheetNames.set(node.callee.name, [].concat((0, _toConsumableArray2.default)(alreadyCaptured), (0, _toConsumableArray2.default)(usedNames)));
      },
      // xstyle={styles.spacing}        xstyle={styles['spacing']}
      //         ^^^^^^^^^^^^^^    or           ^^^^^^^^^^^^^^^^^
      'JSXExpressionContainer': function JSXExpressionContainer(node) {
        // used when composing styles via `sx(…)`
        // we limit it for JSX on purpose (to simplify things)
        var expression = node.expression;

        if (expression.type !== 'MemberExpression') {
          return;
        }

        var stylesheetName = null;

        if (expression.property.name != null) {
          stylesheetName = expression.property.name;
        } else if (expression.property.value != null) {
          stylesheetName = expression.property.value;
        }

        var maybeCaptured = usedStylesheetNames.get(expression.object.name);
        var alreadyCaptured = maybeCaptured !== null && maybeCaptured !== void 0 ? maybeCaptured : [];
        usedStylesheetNames.set(expression.object.name, [].concat((0, _toConsumableArray2.default)(alreadyCaptured), [stylesheetName]));
      },
      'Program:exit': function ProgramExit(node) {
        if (unableToAnalyzeUsedStylesheets === true) {
          // backout early in cases we are not 100% sure about it
          return;
        }

        definedStylesheetNames.forEach(function (definedNames, callee) {
          var _definedNames$filter, _usedNames$filter;

          var usedNames = usedStylesheetNames.get(callee);

          if (usedNames == null) {
            var definedNode = definedStylesheetNodes.get(callee);
            context.report({
              node: node,
              loc: definedNode ? definedNode.loc : undefined,
              message: 'SX function "{{functionName}}" was not used anywhere in the code.',
              data: {
                functionName: callee
              }
            });
          }

          var definedButNotUsed = (_definedNames$filter = definedNames.filter(function (name) {
            return !(usedNames !== null && usedNames !== void 0 && usedNames.includes(name));
          })) !== null && _definedNames$filter !== void 0 ? _definedNames$filter : [];

          var _iterator6 = _createForOfIteratorHelper(definedButNotUsed),
              _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var name = _step6.value;
              var definedNameNode = definedStylesheetNameNodes.get(name);
              context.report({
                node: node,
                loc: definedNameNode ? definedNameNode.loc : undefined,
                message: 'Unused stylesheet: {{stylesheetName}} (defined via "{{definedBy}}" variable)',
                data: {
                  stylesheetName: name,
                  definedBy: callee
                }
              });
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }

          var usedButNotDefined = (_usedNames$filter = usedNames === null || usedNames === void 0 ? void 0 : usedNames.filter(function (name) {
            return !definedNames.includes(name);
          })) !== null && _usedNames$filter !== void 0 ? _usedNames$filter : [];

          var _iterator7 = _createForOfIteratorHelper(usedButNotDefined),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _name = _step7.value;
              var usedNode = usedStylesheetNodes.get(_name);
              context.report({
                node: node,
                loc: usedNode ? usedNode.loc : undefined,
                message: 'Unknown stylesheet used: {{stylesheetName}} (not defined anywhere)',
                data: {
                  stylesheetName: _name
                }
              });
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        });
      }
    };
  }
};