"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getObjectPropertyName = require('./utils/getObjectPropertyName');

var getSXImportSpecifiers = require('./utils/getSXImportSpecifiers');

var isSXKeyframesVariableDeclarator = require('./utils/isSXKeyframesVariableDeclarator');

var isSXVariableDeclarator = require('./utils/isSXVariableDeclarator'); // Map(physical prop => logical prop)
//
// See: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties/Margins_borders_padding


var suggestions = new Map([// Border bottom:
['borderBottom', 'borderBlockEnd'], ['borderBottomColor', 'borderBlockEndColor'], ['borderBottomStyle', 'borderBlockEndStyle'], ['borderBottomWidth', 'borderBlockEndWidth'], // Border top:
['borderTop', 'borderBlockStart'], ['borderTopColor', 'borderBlockStartColor'], ['borderTopStyle', 'borderBlockStartStyle'], ['borderTopWidth', 'borderBlockStartWidth'], // Border right:
['borderRight', 'borderInlineEnd'], ['borderRightColor', 'borderInlineEndColor'], ['borderRightStyle', 'borderInlineEndStyle'], ['borderRightWidth', 'borderInlineEndWidth'], // Border left:
['borderLeft', 'borderInlineStart'], ['borderLeftColor', 'borderInlineStartColor'], ['borderLeftStyle', 'borderInlineStartStyle'], ['borderLeftWidth', 'borderInlineStartWidth'], // Margin:
['marginBottom', 'marginBlockEnd'], ['marginTop', 'marginBlockStart'], ['marginRight', 'marginInlineEnd'], ['marginLeft', 'marginInlineStart'], // Padding:
['paddingBottom', 'paddingBlockEnd'], ['paddingTop', 'paddingBlockStart'], ['paddingRight', 'paddingInlineEnd'], ['paddingLeft', 'paddingInlineStart']]);
/**
 * This rule aims to suggest logical CSS properties instead of physical CSS properties to improve
 * support of other layouts (LTR/RTL, â€¦).
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties
 * See: https://caniuse.com/css-logical-props
 */

module.exports = {
  meta: {
    fixable: 'code'
  },
  create: function create(context) {
    // import sx from '@adeira/sx'
    //        ^^
    var importDefaultSpecifier = null; // import { create as sxCreate } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierCreate = null; // import { keyframes as sxKeyframes } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierKeyframes = null;
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        var importSpecifiers = getSXImportSpecifiers(node);

        if (importSpecifiers !== null) {
          importDefaultSpecifier = importSpecifiers.importDefaultSpecifier;
          importSpecifierCreate = importSpecifiers.importSpecifierCreate;
          importSpecifierKeyframes = importSpecifiers.importSpecifierKeyframes;
        }
      },
      // const styles = sx.create({})
      //       ^^^^^^^^^^^^^^^^^^^^^^
      //       | id |
      VariableDeclarator: function VariableDeclarator(node) {
        if ( // "sx.create" and "sx.keyframes" are essentially the same from the validation point of view
        isSXVariableDeclarator(node, importDefaultSpecifier, importSpecifierCreate) || isSXKeyframesVariableDeclarator(node, importDefaultSpecifier, importSpecifierKeyframes)) {
          var _node$init;

          var initArguments = ((_node$init = node.init) === null || _node$init === void 0 ? void 0 : _node$init.arguments) || [];
          var firstArgument = initArguments[0]; // $FlowExpectedError[unnecessary-optional-chain]: https://github.com/facebook/flow/issues/5972

          if ((firstArgument === null || firstArgument === void 0 ? void 0 : firstArgument.type) === 'ObjectExpression') {
            var _firstArgument$proper;

            // $FlowExpectedError[unnecessary-optional-chain]: https://github.com/facebook/flow/issues/5972
            var firstArgumentProperties = (_firstArgument$proper = firstArgument === null || firstArgument === void 0 ? void 0 : firstArgument.properties) !== null && _firstArgument$proper !== void 0 ? _firstArgument$proper : [];

            var _iterator = _createForOfIteratorHelper(firstArgumentProperties),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var property = _step.value;

                if (property.type === 'Property' && property.value.type === 'ObjectExpression') {
                  var _iterator2 = _createForOfIteratorHelper(property.value.properties),
                      _step2;

                  try {
                    var _loop = function _loop() {
                      var styleNameProperty = _step2.value;

                      if (styleNameProperty.type === 'Property') {
                        var propertyName = getObjectPropertyName(styleNameProperty);

                        if (suggestions.has(propertyName)) {
                          context.report({
                            node: styleNameProperty.key,
                            message: 'Use logical CSS property "{{newProperty}}" instead of physical CSS property "{{oldProperty}}".',
                            data: {
                              oldProperty: propertyName,
                              newProperty: suggestions.get(propertyName)
                            },
                            fix: function fix(fixer) {
                              return fixer.replaceText(styleNameProperty.key, suggestions.get(propertyName));
                            }
                          });
                        }
                      }
                    };

                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      _loop();
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
      }
    };
  }
};