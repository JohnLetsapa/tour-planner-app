"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getSXImportSpecifiers = require('./utils/getSXImportSpecifiers');

var isSXVariableDeclarator = require('./utils/isSXVariableDeclarator');

var isSXKeyframesVariableDeclarator = require('./utils/isSXKeyframesVariableDeclarator');

var getVariableDeclaratorCalleeName = require('./utils/getVariableDeclaratorCalleeName');
/**
 * This rule tries to catch obviously invalid SX usages.
 */


module.exports = {
  create: function create(context) {
    // import sx from '@adeira/sx'
    //        ^^
    var importDefaultSpecifier = null; // import { create as sxCreate } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierCreate = null; // import { keyframes as sxKeyframes } from '@adeira/sx';
    //                    ^^^^^^^^

    var importSpecifierKeyframes = null;
    return {
      // TODO: add support for `require("@adeira/sx")`
      ImportDeclaration: function ImportDeclaration(node) {
        var importSpecifiers = getSXImportSpecifiers(node);

        if (importSpecifiers !== null) {
          importDefaultSpecifier = importSpecifiers.importDefaultSpecifier;
          importSpecifierCreate = importSpecifiers.importSpecifierCreate;
          importSpecifierKeyframes = importSpecifiers.importSpecifierKeyframes;
        }
      },
      // const styles = sx.create({})
      //       ^^^^^^^^^^^^^^^^^^^^^^
      //       | id |
      VariableDeclarator: function VariableDeclarator(node) {
        if ( // "sx.create" and "sx.keyframes" are essentially the same from the validation point of view
        isSXVariableDeclarator(node, importDefaultSpecifier, importSpecifierCreate) || isSXKeyframesVariableDeclarator(node, importDefaultSpecifier, importSpecifierKeyframes)) {
          var _node$init, _firstArgument$proper;

          var initArguments = ((_node$init = node.init) === null || _node$init === void 0 ? void 0 : _node$init.arguments) || [];
          var calleeName = getVariableDeclaratorCalleeName(node, importDefaultSpecifier);

          if (initArguments.length > 1) {
            context.report({
              node: node,
              message: 'SX function "{{calleeName}}" was called with too many arguments. Only one is allowed.',
              data: {
                calleeName: calleeName
              }
            });
          }

          var firstArgument = initArguments[0]; // $FlowIssue[unnecessary-optional-chain]: https://github.com/facebook/flow/issues/5972

          if ((firstArgument === null || firstArgument === void 0 ? void 0 : firstArgument.type) !== 'ObjectExpression') {
            context.report({
              node: node,
              message: 'SX function "{{calleeName}}" must be called with object in a first argument.',
              data: {
                calleeName: calleeName
              }
            });
            return;
          } // $FlowIssue[unnecessary-optional-chain]: https://github.com/facebook/flow/issues/5972


          var firstArgumentProperties = (_firstArgument$proper = firstArgument === null || firstArgument === void 0 ? void 0 : firstArgument.properties) !== null && _firstArgument$proper !== void 0 ? _firstArgument$proper : [];

          var _iterator = _createForOfIteratorHelper(firstArgumentProperties),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var property = _step.value;

              if (property.type === 'Property' && property.value.type !== 'ObjectExpression' && property.value.type !== 'Identifier') {
                var propertyName = '???';

                if (property.key.type === 'Literal') {
                  propertyName = property.key.value;
                } else if (property.key.type === 'Identifier') {
                  propertyName = property.key.name;
                }

                context.report({
                  node: property,
                  message: 'Each SX "{{calleeName}}" property must be an object but "{{propertyName}}" is not.',
                  data: {
                    calleeName: calleeName,
                    propertyName: propertyName
                  }
                });
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    };
  }
};